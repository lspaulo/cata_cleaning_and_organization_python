# -*- coding: utf-8 -*-
"""Desafio5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Y63E_rF5cdeS-ieavMCDw5DkMoHlAAr
"""

!pip install sidetable
!pip install ydata-profiling

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import scale

from ydata_profiling import ProfileReport

import missingno as msno

sns.set_theme(
    context='talk',
    style='ticks',
    font_scale=.8,
    rc={
        'figure.figsize': (12,8)
    }
)

def list_attributes(obj):
  """Lista atributos e funções de um objeto"""
  return [attr for attr in obj.__dir__() if not attr.startswith('_')]

"""# Etapa 01"""

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DNC/Engenharia de Dados/Matéria 5/data.csv', encoding='latin-1')
df.head()

# Verificação dos dados com profile
df.profile_report()

# Verificando infromações gerais do df
df.info()

# Resumo estatístico do df
df.describe()

"""# Etapa 02"""

# Verificar valores nulos
df[df.isnull().any(axis=1)]

# Identificar e mostrar valores nulos por coluna
df_missing = (
  df.isna().sum()
  .to_frame('missing_count')
  .join((df.isna().sum() / df.shape[0]).to_frame('missing_pct'))
  .sort_values('missing_count', ascending=False)
)

df_missing.style.format('{:.2%}', subset=['missing_pct'])

msno.matrix(df);

# Remover nulos com base no coluna 'CustomerID'
df1 = df.dropna(subset=['CustomerID'])

# Verificar valores nulos
df1[df1.isnull().any(axis=1)]

"""# Etapa 03"""

# Filtrando dataset para conter preços acima de zero
df1 = df1[df1['UnitPrice'] > 0]

# Filtrando quantidades maiores que zero
df1 = df1[df1['Quantity'] > 0]

"""# Etapa 04"""

# Identificar valores duplicados
df1[df1.duplicated(keep=False)]

# Valores duplicados agrupados
(
    df
    .groupby(df.columns.tolist(), dropna=False)
    .size()
    .to_frame('n_duplicates')
    .query('n_duplicates > 1')
    .sort_values('n_duplicates', ascending=False)
    .head(20)
)

# Romever duplicadas
df1.drop_duplicates(inplace=True)

"""# Etapa 05


"""

df1.info()

# Modificando tipo de dados
df1['CustomerID'] = df1['CustomerID'].astype(int)
df1['InvoiceDate'] = pd.to_datetime(df1['InvoiceDate'])

"""# Etapa 06"""

# Verificando outliers com box plot
df1.plot.box(figsize=(18,7));

# Remover outliers extremos
df1 = df1[(df1['Quantity'] <= 10000) & (df1['UnitPrice'] <= 5000)]

# Verificando outliers com box plot
df1.plot.box(figsize=(18,7));

"""# Etapa 07"""

# Criando coluna total
df1['Total'] = df1['Quantity'] * df1['UnitPrice']
df1.head()

"""# Etapa 08"""

ultima_data = df1['InvoiceDate'].max()
ultima_data

"""# Etapa 09"""

# Top 10 países com maiores totais de vendas
top_country = df1.groupby('Country')['Total'].sum().nlargest(10)
top_country

# Gráfico de barras horizontais para visualizar os 10 países com maiores totais de vendas.
top_country.plot.barh(figsize=(12,6))
plt.title('Top 10 países com maiores totais de vendas')
plt.xlabel('Total de vendas')
plt.gca().invert_yaxis();

# Top 10 produtos mais vendidos
top_product = df1.groupby('Description')['Total'].sum().nlargest(10)
top_product

# Grafico com 10 produtos de maiores vendas
top_product.plot.bar(figsize=(12,6))
plt.title('Top 10 produtos com maiores vendas')
plt.ylabel('Total de vendas');

# Valor de venda total por mês
df1['Month'] = df1['InvoiceDate'].dt.to_period('M')
vendas_por_mes = df1.groupby('Month')['Total'].sum()
vendas_por_mes

# Gráfico vendas totais por mês
vendas_por_mes.plot.line(figsize=(12,6))
plt.title('Vendas totais por mês')
plt.ylabel('Total de vendas');

# Agrupando por mês e país e verificando total de vendas
top_paises = df1.groupby('Country')['Total'].sum().nlargest(10)
top_paises_list = top_country.index.tolist()
df_top_paises = df1[df1['Country'].isin(top_paises_list)]
df_top_paises.head()
vendas_por_mes_top_paises = df_top_paises.groupby(['Month', 'Country'])['Total'].sum()
vendas_por_mes_top_paises

# Plotando gráfico vendas por mês e pais
vendas_por_mes_top_paises.unstack().plot.area(figsize=(12,6))
plt.title('Vendas totais por mês por país')
plt.ylabel('Total de vendas')
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.show()

"""# Etapa 10"""

# Agrupar por CustomerID e InvoiceNo para obter data e o preço total pedido
df_agg = df1.groupby(['CustomerID', 'InvoiceNo']).agg({
    'InvoiceDate': 'max',
    'Total': 'sum'
}).reset_index()
df_agg.head()

# Agrupar novamente por CulstomerID para calcular R, F e M
df_rfm = df_agg.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (ultima_data - x.max()).days,
    'InvoiceNo': 'count',
    'Total': 'sum'
}).reset_index()
df_rfm.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']
df_rfm.head()